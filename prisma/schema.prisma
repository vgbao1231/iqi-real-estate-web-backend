generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MARKETING
  SALE
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  image     Json?
  phone     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdArticle Article[] @relation("ArticleCreated")
  updatedArticle Article[] @relation("ArticleUpdated")
}

enum PartnerCategory {
  DEVELOPER // Chủ đầu tư
  INTERNATIONAL // Đối tác quốc tế
  BANK // Đối tác ngân hàng
}

model Partner {
  id               String          @id @default(uuid())
  name             String
  category         PartnerCategory @default(DEVELOPER)
  shortDescription String?
  description      String?
  countryCount     Int?
  agentCount       Int?
  projectCount     Int?
  partnershipYear  Int?
  specialties      Json?
  achievements     Json?
  benefits         Json?
  image            Json?
  loanRate         String?
  maxLoan          String?
  revenue          String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum ArticleCategory {
  MARKET
  LAW
  INVESTMENT
  RESORT
  BANK
}

enum ArticleType {
  MACRO
  MICRO
}

model Article {
  id          String          @id @default(cuid())
  title       String
  description String?
  type        ArticleType     @default(MACRO)
  content     String?
  category    ArticleCategory @default(MARKET)
  readTime    String?
  views       Int             @default(0)
  image       Json?
  isFeatured  Boolean         @default(false)
  isPublished Boolean         @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String?

  tags Json?

  // Quan hệ với User
  creator User  @relation("ArticleCreated", fields: [createdBy], references: [id])
  updater User? @relation("ArticleUpdated", fields: [updatedBy], references: [id])
}

model Contact {
  id String @id @default(uuid())

  mainHotline  String
  mainEmail    String
  website      String
  mainAddress  String
  workingHours String?

  socialMedia Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
